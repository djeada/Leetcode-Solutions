from collections import deque
from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        # Build adjacency lists once
        adj = [
            [j for j in range(n) if graph[i][j] == 1]
            for i in range(n)
        ]
        
        # Sort so ties go to the smallest index
        initial_sorted = sorted(initial)
        best_node = initial_sorted[0]
        min_infected = float('inf')
        
        # Try removing each candidate in turn
        for remove_node in initial_sorted:
            visited = [False] * n
            q = deque()
            
            # Seed BFS with all initially infected except the removed one
            for src in initial_sorted:
                if src != remove_node:
                    visited[src] = True
                    q.append(src)
            
            # Spread infection (the "removed" node is not pre-infected,
            # but can still become infected if reachable)
            infected_count = 0
            while q:
                u = q.popleft()
                infected_count += 1
                for v in adj[u]:
                    if not visited[v]:
                        visited[v] = True
                        q.append(v)
            
            # Pick the removal that yields the fewest infected
            if infected_count < min_infected:
                min_infected = infected_count
                best_node = remove_node
        
        return best_node
