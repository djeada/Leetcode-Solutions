from collections import deque
from typing import List

class Solution:
    def minMalwareSpread(self, graph: List[List[int]], initial: List[int]) -> int:
        n = len(graph)
        # Build adjacency lists once
        adj = [ [j for j in range(n) if graph[i][j]] for i in range(n) ]
        
        best_node = min(initial)
        min_infected = float('inf')
        
        # Try removing each candidate in sorted order (to break ties by smaller node)
        for remove_node in sorted(initial):
            visited = [False] * n
            visited[remove_node] = True   # simulate removal by marking it visited
            q = deque()
            
            # Initialize BFS with all initially infected except the removed one
            for src in initial:
                if src != remove_node:
                    visited[src] = True
                    q.append(src)
            
            # Standard BFS on the modified graph
            infected_count = 0
            while q:
                u = q.popleft()
                infected_count += 1
                for w in adj[u]:
                    if not visited[w]:
                        visited[w] = True
                        q.append(w)
            
            # Compare to best so far
            if infected_count < min_infected:
                min_infected = infected_count
                best_node = remove_node

        return best_node
